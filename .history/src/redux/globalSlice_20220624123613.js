import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import { collection, onSnapshot } from "firebase/firestore";
export const Fetchdata = createAsyncThunk("firebaseData", async (db, path) => {
  const colRef = collection(db, path);
  console.log(
    "üöÄ ~ file: globalSlice.js ~ line 5 ~ Fetchdata ~ colRef",
    colRef
  );
  onSnapshot(colRef, (snapshot) => {
    let result = [];
    snapshot.forEach((doc) => {
      result.push({
        id: doc.id,
        ...doc.data(),
      });
    });
    console.log(result);
  });
});

const globalSlice = createSlice({
  name: "global",
  initialState: {
    isLoading: false,
    errorMessage: "",
  },
  reducers: {},
  extraReducers: (builder) => {
    // B·∫Øt ƒë·∫ßu th·ª±c hi·ªán action login (Promise pending)
    builder.addCase(Fetchdata.pending, (state) => {
      // B·∫≠t tr·∫°ng th√°i loading
      state.isLoading = true;
    });

    // Khi th·ª±c hi·ªán action login th√†nh c√¥ng (Promise fulfilled)
    builder.addCase(Fetchdata.fulfilled, (state, action) => {
      // T·∫Øt tr·∫°ng th√°i loading, l∆∞u th√¥ng tin user v√†o store
      state.isLoading = false;
    });

    // Khi th·ª±c hi·ªán action login th·∫•t b·∫°i (Promise rejected)
    builder.addCase(Fetchdata.rejected, (state, action) => {
      // T·∫Øt tr·∫°ng th√°i loading, l∆∞u th√¥ng b√°o l·ªói v√†o store
      state.isLoading = false;
    });
  },
});

export const {} = globalSlice.actions;

export default globalSlice.reducer;
